// Copyright (C) 2018 gyee authors
//
// This file is part of the gyee library.
//
// The gyee library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The gyee library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the gyee library.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package corepb;

message Account {
    // account transaction nonce start from 0
    uint64 nonce = 1;

    // account balance encoded big-endian bytes with math/big/Int.Bytes()
    bytes balance = 2;
}

// signature for a block header or transaction
message Signature {
    // signer address
    // may be omitted if address can be inferred from signature
    bytes signer = 1;

    // signature algorithm
    // may be omitted for default algorithm
    uint32 sigAlgorithm = 2;

    // encoded signature bytes
    bytes signature = 3;
}

message Transaction {
    // chain ID
    uint32 chainID = 1;

    // transaction nonce
    uint64 nonce = 2;

    // transaction recipient
    bytes recipient = 3;

    // transaction amount
    bytes amount = 4;

    // signature with LAST MESSAGE TAG of one byte
    Signature signature = 15;
}

// message for
//   block header
//   bloom filter for related addresses
//   multiple signatures from validator
message SignedBlockHeader {
    // embedded encoded block header
    bytes header = 1;

    // block tx bloom filter
    bytes bloom = 2;

    // header signature for hash(hash(header) + bloom)
    repeated Signature signatures = 3;
}

// message for
//   block body = block - header
message BlockBody {
    // encoded transaction bytes
    repeated bytes raw_transactions = 1;

    // TODO: receipts
}

message Block {
    SignedBlockHeader header = 1;

    BlockBody body = 2;
}
