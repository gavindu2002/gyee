// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcpmsg.proto

package tcpmsg_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtocolId int32

const (
	ProtocolId_PID_P2P ProtocolId = 0
	ProtocolId_PID_EXT ProtocolId = 255
)

var ProtocolId_name = map[int32]string{
	0:   "PID_P2P",
	255: "PID_EXT",
}
var ProtocolId_value = map[string]int32{
	"PID_P2P": 0,
	"PID_EXT": 255,
}

func (x ProtocolId) Enum() *ProtocolId {
	p := new(ProtocolId)
	*p = x
	return p
}
func (x ProtocolId) String() string {
	return proto.EnumName(ProtocolId_name, int32(x))
}
func (x *ProtocolId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtocolId_value, data, "ProtocolId")
	if err != nil {
		return err
	}
	*x = ProtocolId(value)
	return nil
}
func (ProtocolId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{0}
}

type MessageId int32

const (
	MessageId_MID_HANDSHAKE   MessageId = 0
	MessageId_MID_PING        MessageId = 1
	MessageId_MID_PONG        MessageId = 2
	MessageId_MID_TX          MessageId = 3
	MessageId_MID_EVENT       MessageId = 4
	MessageId_MID_BLOCKHEADER MessageId = 5
	MessageId_MID_BLOCK       MessageId = 6
	MessageId_MID_CHKK        MessageId = 7
	MessageId_MID_RPTK        MessageId = 8
	MessageId_MID_INVALID     MessageId = -1
)

var MessageId_name = map[int32]string{
	0:  "MID_HANDSHAKE",
	1:  "MID_PING",
	2:  "MID_PONG",
	3:  "MID_TX",
	4:  "MID_EVENT",
	5:  "MID_BLOCKHEADER",
	6:  "MID_BLOCK",
	7:  "MID_CHKK",
	8:  "MID_RPTK",
	-1: "MID_INVALID",
}
var MessageId_value = map[string]int32{
	"MID_HANDSHAKE":   0,
	"MID_PING":        1,
	"MID_PONG":        2,
	"MID_TX":          3,
	"MID_EVENT":       4,
	"MID_BLOCKHEADER": 5,
	"MID_BLOCK":       6,
	"MID_CHKK":        7,
	"MID_RPTK":        8,
	"MID_INVALID":     -1,
}

func (x MessageId) Enum() *MessageId {
	p := new(MessageId)
	*p = x
	return p
}
func (x MessageId) String() string {
	return proto.EnumName(MessageId_name, int32(x))
}
func (x *MessageId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageId_value, data, "MessageId")
	if err != nil {
		return err
	}
	*x = MessageId(value)
	return nil
}
func (MessageId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{1}
}

type KeyStatus int32

const (
	KeyStatus_KS_NOTEXIST KeyStatus = 0
	KeyStatus_KS_EXIST    KeyStatus = 1
)

var KeyStatus_name = map[int32]string{
	0: "KS_NOTEXIST",
	1: "KS_EXIST",
}
var KeyStatus_value = map[string]int32{
	"KS_NOTEXIST": 0,
	"KS_EXIST":    1,
}

func (x KeyStatus) Enum() *KeyStatus {
	p := new(KeyStatus)
	*p = x
	return p
}
func (x KeyStatus) String() string {
	return proto.EnumName(KeyStatus_name, int32(x))
}
func (x *KeyStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KeyStatus_value, data, "KeyStatus")
	if err != nil {
		return err
	}
	*x = KeyStatus(value)
	return nil
}
func (KeyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{2}
}

type P2PPackage struct {
	Pid                  *ProtocolId `protobuf:"varint,1,req,name=Pid,enum=tcpmsg.pb.ProtocolId" json:"Pid,omitempty"`
	ExtMid               *MessageId  `protobuf:"varint,2,opt,name=ExtMid,enum=tcpmsg.pb.MessageId" json:"ExtMid,omitempty"`
	ExtKey               []byte      `protobuf:"bytes,3,opt,name=ExtKey" json:"ExtKey,omitempty"`
	PayloadLength        *uint32     `protobuf:"varint,4,req,name=PayloadLength" json:"PayloadLength,omitempty"`
	Payload              []byte      `protobuf:"bytes,5,opt,name=Payload" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *P2PPackage) Reset()         { *m = P2PPackage{} }
func (m *P2PPackage) String() string { return proto.CompactTextString(m) }
func (*P2PPackage) ProtoMessage()    {}
func (*P2PPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{0}
}
func (m *P2PPackage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PPackage.Unmarshal(m, b)
}
func (m *P2PPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PPackage.Marshal(b, m, deterministic)
}
func (dst *P2PPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PPackage.Merge(dst, src)
}
func (m *P2PPackage) XXX_Size() int {
	return xxx_messageInfo_P2PPackage.Size(m)
}
func (m *P2PPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PPackage.DiscardUnknown(m)
}

var xxx_messageInfo_P2PPackage proto.InternalMessageInfo

func (m *P2PPackage) GetPid() ProtocolId {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ProtocolId_PID_P2P
}

func (m *P2PPackage) GetExtMid() MessageId {
	if m != nil && m.ExtMid != nil {
		return *m.ExtMid
	}
	return MessageId_MID_HANDSHAKE
}

func (m *P2PPackage) GetExtKey() []byte {
	if m != nil {
		return m.ExtKey
	}
	return nil
}

func (m *P2PPackage) GetPayloadLength() uint32 {
	if m != nil && m.PayloadLength != nil {
		return *m.PayloadLength
	}
	return 0
}

func (m *P2PPackage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type P2PMessage struct {
	Mid                  *MessageId            `protobuf:"varint,1,req,name=mid,enum=tcpmsg.pb.MessageId" json:"mid,omitempty"`
	Handshake            *P2PMessage_Handshake `protobuf:"bytes,2,opt,name=handshake" json:"handshake,omitempty"`
	Ping                 *P2PMessage_Ping      `protobuf:"bytes,3,opt,name=ping" json:"ping,omitempty"`
	Pong                 *P2PMessage_Pong      `protobuf:"bytes,4,opt,name=pong" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *P2PMessage) Reset()         { *m = P2PMessage{} }
func (m *P2PMessage) String() string { return proto.CompactTextString(m) }
func (*P2PMessage) ProtoMessage()    {}
func (*P2PMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{1}
}
func (m *P2PMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMessage.Unmarshal(m, b)
}
func (m *P2PMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMessage.Marshal(b, m, deterministic)
}
func (dst *P2PMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMessage.Merge(dst, src)
}
func (m *P2PMessage) XXX_Size() int {
	return xxx_messageInfo_P2PMessage.Size(m)
}
func (m *P2PMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMessage.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMessage proto.InternalMessageInfo

func (m *P2PMessage) GetMid() MessageId {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return MessageId_MID_HANDSHAKE
}

func (m *P2PMessage) GetHandshake() *P2PMessage_Handshake {
	if m != nil {
		return m.Handshake
	}
	return nil
}

func (m *P2PMessage) GetPing() *P2PMessage_Ping {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *P2PMessage) GetPong() *P2PMessage_Pong {
	if m != nil {
		return m.Pong
	}
	return nil
}

type P2PMessage_Protocol struct {
	Pid                  *ProtocolId `protobuf:"varint,1,req,name=Pid,enum=tcpmsg.pb.ProtocolId" json:"Pid,omitempty"`
	Ver                  []byte      `protobuf:"bytes,2,req,name=Ver" json:"Ver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *P2PMessage_Protocol) Reset()         { *m = P2PMessage_Protocol{} }
func (m *P2PMessage_Protocol) String() string { return proto.CompactTextString(m) }
func (*P2PMessage_Protocol) ProtoMessage()    {}
func (*P2PMessage_Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{1, 0}
}
func (m *P2PMessage_Protocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMessage_Protocol.Unmarshal(m, b)
}
func (m *P2PMessage_Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMessage_Protocol.Marshal(b, m, deterministic)
}
func (dst *P2PMessage_Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMessage_Protocol.Merge(dst, src)
}
func (m *P2PMessage_Protocol) XXX_Size() int {
	return xxx_messageInfo_P2PMessage_Protocol.Size(m)
}
func (m *P2PMessage_Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMessage_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMessage_Protocol proto.InternalMessageInfo

func (m *P2PMessage_Protocol) GetPid() ProtocolId {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ProtocolId_PID_P2P
}

func (m *P2PMessage_Protocol) GetVer() []byte {
	if m != nil {
		return m.Ver
	}
	return nil
}

type P2PMessage_Handshake struct {
	SubNetId             []byte                 `protobuf:"bytes,1,req,name=SubNetId" json:"SubNetId,omitempty"`
	NodeId               []byte                 `protobuf:"bytes,2,req,name=NodeId" json:"NodeId,omitempty"`
	IP                   []byte                 `protobuf:"bytes,3,req,name=IP" json:"IP,omitempty"`
	UDP                  *uint32                `protobuf:"varint,4,req,name=UDP" json:"UDP,omitempty"`
	TCP                  *uint32                `protobuf:"varint,5,req,name=TCP" json:"TCP,omitempty"`
	ProtoNum             *uint32                `protobuf:"varint,6,req,name=ProtoNum" json:"ProtoNum,omitempty"`
	Protocols            []*P2PMessage_Protocol `protobuf:"bytes,7,rep,name=Protocols" json:"Protocols,omitempty"`
	SignR                *int32                 `protobuf:"varint,8,req,name=SignR" json:"SignR,omitempty"`
	R                    []byte                 `protobuf:"bytes,9,req,name=R" json:"R,omitempty"`
	SignS                *int32                 `protobuf:"varint,10,req,name=SignS" json:"SignS,omitempty"`
	S                    []byte                 `protobuf:"bytes,11,req,name=S" json:"S,omitempty"`
	Extra                []byte                 `protobuf:"bytes,12,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *P2PMessage_Handshake) Reset()         { *m = P2PMessage_Handshake{} }
func (m *P2PMessage_Handshake) String() string { return proto.CompactTextString(m) }
func (*P2PMessage_Handshake) ProtoMessage()    {}
func (*P2PMessage_Handshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{1, 1}
}
func (m *P2PMessage_Handshake) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMessage_Handshake.Unmarshal(m, b)
}
func (m *P2PMessage_Handshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMessage_Handshake.Marshal(b, m, deterministic)
}
func (dst *P2PMessage_Handshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMessage_Handshake.Merge(dst, src)
}
func (m *P2PMessage_Handshake) XXX_Size() int {
	return xxx_messageInfo_P2PMessage_Handshake.Size(m)
}
func (m *P2PMessage_Handshake) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMessage_Handshake.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMessage_Handshake proto.InternalMessageInfo

func (m *P2PMessage_Handshake) GetSubNetId() []byte {
	if m != nil {
		return m.SubNetId
	}
	return nil
}

func (m *P2PMessage_Handshake) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *P2PMessage_Handshake) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *P2PMessage_Handshake) GetUDP() uint32 {
	if m != nil && m.UDP != nil {
		return *m.UDP
	}
	return 0
}

func (m *P2PMessage_Handshake) GetTCP() uint32 {
	if m != nil && m.TCP != nil {
		return *m.TCP
	}
	return 0
}

func (m *P2PMessage_Handshake) GetProtoNum() uint32 {
	if m != nil && m.ProtoNum != nil {
		return *m.ProtoNum
	}
	return 0
}

func (m *P2PMessage_Handshake) GetProtocols() []*P2PMessage_Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *P2PMessage_Handshake) GetSignR() int32 {
	if m != nil && m.SignR != nil {
		return *m.SignR
	}
	return 0
}

func (m *P2PMessage_Handshake) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *P2PMessage_Handshake) GetSignS() int32 {
	if m != nil && m.SignS != nil {
		return *m.SignS
	}
	return 0
}

func (m *P2PMessage_Handshake) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *P2PMessage_Handshake) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type P2PMessage_Ping struct {
	Seq                  *uint64  `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Extra                []byte   `protobuf:"bytes,2,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PMessage_Ping) Reset()         { *m = P2PMessage_Ping{} }
func (m *P2PMessage_Ping) String() string { return proto.CompactTextString(m) }
func (*P2PMessage_Ping) ProtoMessage()    {}
func (*P2PMessage_Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{1, 2}
}
func (m *P2PMessage_Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMessage_Ping.Unmarshal(m, b)
}
func (m *P2PMessage_Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMessage_Ping.Marshal(b, m, deterministic)
}
func (dst *P2PMessage_Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMessage_Ping.Merge(dst, src)
}
func (m *P2PMessage_Ping) XXX_Size() int {
	return xxx_messageInfo_P2PMessage_Ping.Size(m)
}
func (m *P2PMessage_Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMessage_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMessage_Ping proto.InternalMessageInfo

func (m *P2PMessage_Ping) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *P2PMessage_Ping) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type P2PMessage_Pong struct {
	Seq                  *uint64  `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Extra                []byte   `protobuf:"bytes,2,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PMessage_Pong) Reset()         { *m = P2PMessage_Pong{} }
func (m *P2PMessage_Pong) String() string { return proto.CompactTextString(m) }
func (*P2PMessage_Pong) ProtoMessage()    {}
func (*P2PMessage_Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{1, 3}
}
func (m *P2PMessage_Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMessage_Pong.Unmarshal(m, b)
}
func (m *P2PMessage_Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMessage_Pong.Marshal(b, m, deterministic)
}
func (dst *P2PMessage_Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMessage_Pong.Merge(dst, src)
}
func (m *P2PMessage_Pong) XXX_Size() int {
	return xxx_messageInfo_P2PMessage_Pong.Size(m)
}
func (m *P2PMessage_Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMessage_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMessage_Pong proto.InternalMessageInfo

func (m *P2PMessage_Pong) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *P2PMessage_Pong) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

//
// External application message
//
type ExtMessage struct {
	Mid                  *MessageId            `protobuf:"varint,1,req,name=mid,enum=tcpmsg.pb.MessageId" json:"mid,omitempty"`
	CheckKey             *ExtMessage_CheckKey  `protobuf:"bytes,2,opt,name=checkKey" json:"checkKey,omitempty"`
	ReportKey            *ExtMessage_ReportKey `protobuf:"bytes,3,opt,name=reportKey" json:"reportKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExtMessage) Reset()         { *m = ExtMessage{} }
func (m *ExtMessage) String() string { return proto.CompactTextString(m) }
func (*ExtMessage) ProtoMessage()    {}
func (*ExtMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{2}
}
func (m *ExtMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtMessage.Unmarshal(m, b)
}
func (m *ExtMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtMessage.Marshal(b, m, deterministic)
}
func (dst *ExtMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtMessage.Merge(dst, src)
}
func (m *ExtMessage) XXX_Size() int {
	return xxx_messageInfo_ExtMessage.Size(m)
}
func (m *ExtMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ExtMessage proto.InternalMessageInfo

func (m *ExtMessage) GetMid() MessageId {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return MessageId_MID_HANDSHAKE
}

func (m *ExtMessage) GetCheckKey() *ExtMessage_CheckKey {
	if m != nil {
		return m.CheckKey
	}
	return nil
}

func (m *ExtMessage) GetReportKey() *ExtMessage_ReportKey {
	if m != nil {
		return m.ReportKey
	}
	return nil
}

type ExtMessage_CheckKey struct {
	Extra                []byte   `protobuf:"bytes,1,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtMessage_CheckKey) Reset()         { *m = ExtMessage_CheckKey{} }
func (m *ExtMessage_CheckKey) String() string { return proto.CompactTextString(m) }
func (*ExtMessage_CheckKey) ProtoMessage()    {}
func (*ExtMessage_CheckKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{2, 0}
}
func (m *ExtMessage_CheckKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtMessage_CheckKey.Unmarshal(m, b)
}
func (m *ExtMessage_CheckKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtMessage_CheckKey.Marshal(b, m, deterministic)
}
func (dst *ExtMessage_CheckKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtMessage_CheckKey.Merge(dst, src)
}
func (m *ExtMessage_CheckKey) XXX_Size() int {
	return xxx_messageInfo_ExtMessage_CheckKey.Size(m)
}
func (m *ExtMessage_CheckKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtMessage_CheckKey.DiscardUnknown(m)
}

var xxx_messageInfo_ExtMessage_CheckKey proto.InternalMessageInfo

func (m *ExtMessage_CheckKey) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type ExtMessage_ReportKey struct {
	Status               *KeyStatus `protobuf:"varint,1,req,name=Status,enum=tcpmsg.pb.KeyStatus" json:"Status,omitempty"`
	Extra                []byte     `protobuf:"bytes,2,opt,name=Extra" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExtMessage_ReportKey) Reset()         { *m = ExtMessage_ReportKey{} }
func (m *ExtMessage_ReportKey) String() string { return proto.CompactTextString(m) }
func (*ExtMessage_ReportKey) ProtoMessage()    {}
func (*ExtMessage_ReportKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpmsg_e5f342b21f96a9d3, []int{2, 1}
}
func (m *ExtMessage_ReportKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtMessage_ReportKey.Unmarshal(m, b)
}
func (m *ExtMessage_ReportKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtMessage_ReportKey.Marshal(b, m, deterministic)
}
func (dst *ExtMessage_ReportKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtMessage_ReportKey.Merge(dst, src)
}
func (m *ExtMessage_ReportKey) XXX_Size() int {
	return xxx_messageInfo_ExtMessage_ReportKey.Size(m)
}
func (m *ExtMessage_ReportKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtMessage_ReportKey.DiscardUnknown(m)
}

var xxx_messageInfo_ExtMessage_ReportKey proto.InternalMessageInfo

func (m *ExtMessage_ReportKey) GetStatus() KeyStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return KeyStatus_KS_NOTEXIST
}

func (m *ExtMessage_ReportKey) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*P2PPackage)(nil), "tcpmsg.pb.P2PPackage")
	proto.RegisterType((*P2PMessage)(nil), "tcpmsg.pb.P2PMessage")
	proto.RegisterType((*P2PMessage_Protocol)(nil), "tcpmsg.pb.P2PMessage.Protocol")
	proto.RegisterType((*P2PMessage_Handshake)(nil), "tcpmsg.pb.P2PMessage.Handshake")
	proto.RegisterType((*P2PMessage_Ping)(nil), "tcpmsg.pb.P2PMessage.Ping")
	proto.RegisterType((*P2PMessage_Pong)(nil), "tcpmsg.pb.P2PMessage.Pong")
	proto.RegisterType((*ExtMessage)(nil), "tcpmsg.pb.ExtMessage")
	proto.RegisterType((*ExtMessage_CheckKey)(nil), "tcpmsg.pb.ExtMessage.CheckKey")
	proto.RegisterType((*ExtMessage_ReportKey)(nil), "tcpmsg.pb.ExtMessage.ReportKey")
	proto.RegisterEnum("tcpmsg.pb.ProtocolId", ProtocolId_name, ProtocolId_value)
	proto.RegisterEnum("tcpmsg.pb.MessageId", MessageId_name, MessageId_value)
	proto.RegisterEnum("tcpmsg.pb.KeyStatus", KeyStatus_name, KeyStatus_value)
}

func init() { proto.RegisterFile("tcpmsg.proto", fileDescriptor_tcpmsg_e5f342b21f96a9d3) }

var fileDescriptor_tcpmsg_e5f342b21f96a9d3 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6e, 0x9b, 0x4a,
	0x14, 0xc7, 0x2f, 0xf8, 0x93, 0x03, 0x4e, 0xb8, 0x73, 0x73, 0xab, 0x91, 0x17, 0x2d, 0x8a, 0xaa,
	0x06, 0x59, 0x15, 0x0b, 0x96, 0x55, 0xbb, 0x70, 0x6d, 0x14, 0x23, 0x12, 0x3c, 0x1a, 0x68, 0x94,
	0x9d, 0x45, 0x0c, 0xc2, 0x56, 0x12, 0x70, 0x0d, 0x91, 0x92, 0xd7, 0xe9, 0xaa, 0x52, 0x17, 0x7d,
	0x80, 0x3e, 0x5c, 0xaa, 0x19, 0xbe, 0x9c, 0xca, 0xad, 0x52, 0xaf, 0xe6, 0x7f, 0xfc, 0x3b, 0x33,
	0xff, 0x73, 0xe6, 0x0c, 0xa0, 0xe4, 0xcb, 0xcd, 0x6d, 0x16, 0x1b, 0x9b, 0x6d, 0x9a, 0xa7, 0x48,
	0xaa, 0xd4, 0xd5, 0xf1, 0x0f, 0x01, 0x80, 0x98, 0x84, 0x04, 0xcb, 0xeb, 0x20, 0x8e, 0xd0, 0x09,
	0xb4, 0xc8, 0x3a, 0xc4, 0x82, 0x26, 0xea, 0x07, 0xe6, 0xff, 0x46, 0xcd, 0x19, 0x84, 0x25, 0x2e,
	0xd3, 0x1b, 0x3b, 0xa4, 0x8c, 0x40, 0x6f, 0xa1, 0x6b, 0xdd, 0xe7, 0xe7, 0xeb, 0x10, 0x8b, 0x9a,
	0xa0, 0x1f, 0x98, 0x47, 0x3b, 0xec, 0x79, 0x94, 0x65, 0x41, 0x1c, 0xd9, 0x21, 0x2d, 0x19, 0xf4,
	0x82, 0xd3, 0x4e, 0xf4, 0x80, 0x5b, 0x9a, 0xa0, 0x2b, 0xb4, 0x54, 0xe8, 0x35, 0x0c, 0x48, 0xf0,
	0x70, 0x93, 0x06, 0xe1, 0x59, 0x94, 0xc4, 0xf9, 0x0a, 0xb7, 0x35, 0x51, 0x1f, 0xd0, 0xa7, 0x41,
	0x84, 0xa1, 0x57, 0x06, 0x70, 0x87, 0xa7, 0x57, 0xf2, 0xf8, 0x6b, 0x87, 0xbb, 0x2f, 0x0f, 0x44,
	0x6f, 0xa0, 0x75, 0x5b, 0xbb, 0xdf, 0xef, 0x88, 0x01, 0xe8, 0x03, 0x48, 0xab, 0x20, 0x09, 0xb3,
	0x55, 0x70, 0x1d, 0x71, 0xff, 0xb2, 0xf9, 0x6a, 0xb7, 0xd6, 0x7a, 0x47, 0x63, 0x56, 0x61, 0xb4,
	0xc9, 0x40, 0x06, 0xb4, 0x37, 0xeb, 0x24, 0xe6, 0xb5, 0xc8, 0xe6, 0x70, 0x7f, 0x26, 0x59, 0x27,
	0x31, 0xe5, 0x1c, 0xe7, 0xd3, 0x24, 0xc6, 0xed, 0x3f, 0xf2, 0x29, 0xe7, 0xd3, 0x24, 0x1e, 0x5a,
	0xd0, 0xaf, 0xda, 0xfd, 0xfc, 0x0b, 0x51, 0xa1, 0x75, 0x11, 0x6d, 0xb1, 0xa8, 0x89, 0xba, 0x42,
	0xd9, 0x72, 0xf8, 0x4d, 0x04, 0xa9, 0xf6, 0x8f, 0x86, 0xd0, 0xf7, 0xee, 0xae, 0xdc, 0x28, 0xb7,
	0x8b, 0xdd, 0x14, 0x5a, 0x6b, 0x76, 0x3d, 0x6e, 0x1a, 0x46, 0x76, 0x58, 0xa6, 0x97, 0x0a, 0x1d,
	0x80, 0x68, 0x13, 0xdc, 0xe2, 0x31, 0xd1, 0x26, 0xec, 0x8c, 0x4f, 0x53, 0x52, 0x5e, 0x12, 0x5b,
	0xb2, 0x88, 0x3f, 0x21, 0xb8, 0x53, 0x44, 0xfc, 0x09, 0x61, 0xe7, 0x70, 0x6b, 0xee, 0xdd, 0x2d,
	0xee, 0xf2, 0x70, 0xad, 0xd1, 0x7b, 0x90, 0x2a, 0xdb, 0x19, 0xee, 0x69, 0x2d, 0x5d, 0x36, 0x5f,
	0xfe, 0xa6, 0x1b, 0x25, 0x46, 0x9b, 0x04, 0x74, 0x04, 0x1d, 0x6f, 0x1d, 0x27, 0x14, 0xf7, 0x35,
	0x51, 0xef, 0xd0, 0x42, 0x20, 0x05, 0x04, 0x8a, 0x25, 0x6e, 0x51, 0xa0, 0x15, 0xe3, 0x61, 0x68,
	0x18, 0x8f, 0x31, 0x1e, 0x96, 0x0b, 0xc6, 0x63, 0x8c, 0x75, 0x9f, 0x6f, 0x03, 0xac, 0xf0, 0x61,
	0x2a, 0xc4, 0xd0, 0x80, 0x36, 0xbb, 0x32, 0x56, 0x51, 0x16, 0x7d, 0xe6, 0x2d, 0x6a, 0x53, 0xb6,
	0x6c, 0x78, 0xf1, 0x57, 0x3e, 0x7d, 0x3e, 0x7f, 0xfc, 0x45, 0x04, 0x60, 0xaf, 0xe1, 0x2f, 0x47,
	0xf5, 0x1d, 0xf4, 0x97, 0xab, 0x68, 0x79, 0xcd, 0xde, 0x4e, 0x31, 0xa9, 0xbb, 0x1d, 0x6b, 0x36,
	0x34, 0x26, 0x25, 0x45, 0x6b, 0x9e, 0x8d, 0xf9, 0x36, 0xda, 0xa4, 0xdb, 0xfa, 0xe1, 0x3d, 0x1d,
	0xf3, 0x9d, 0x64, 0x5a, 0x61, 0xb4, 0xc9, 0x18, 0x6a, 0xd0, 0xaf, 0x36, 0x6d, 0x6a, 0x12, 0x76,
	0x7b, 0x30, 0x07, 0xa9, 0xce, 0x64, 0x5f, 0x04, 0x2f, 0x0f, 0xf2, 0xbb, 0x6c, 0x4f, 0x51, 0x4e,
	0xf4, 0x50, 0xfc, 0x47, 0x4b, 0x66, 0x7f, 0x93, 0x46, 0x27, 0x00, 0xcd, 0x5c, 0x23, 0x19, 0x7a,
	0xc4, 0x9e, 0x2e, 0x88, 0x49, 0xd4, 0x7f, 0x90, 0x52, 0x08, 0xeb, 0xd2, 0x57, 0x1f, 0x85, 0xd1,
	0x77, 0x01, 0xa4, 0xba, 0x53, 0xe8, 0x5f, 0x18, 0x9c, 0xdb, 0xd3, 0xc5, 0x6c, 0xec, 0x4e, 0xbd,
	0xd9, 0xd8, 0xb1, 0x38, 0xde, 0x67, 0x21, 0x62, 0xbb, 0xa7, 0xaa, 0x50, 0xab, 0xb9, 0x7b, 0xaa,
	0x8a, 0x08, 0xa0, 0xcb, 0x94, 0x7f, 0xa9, 0xb6, 0xd0, 0x00, 0x24, 0xb6, 0xb6, 0x2e, 0x2c, 0xd7,
	0x57, 0xdb, 0xe8, 0x3f, 0x38, 0x64, 0xf2, 0xe3, 0xd9, 0x7c, 0xe2, 0xcc, 0xac, 0xf1, 0xd4, 0xa2,
	0x6a, 0xa7, 0x62, 0x78, 0x50, 0xed, 0x56, 0x9b, 0x4d, 0x66, 0x8e, 0xa3, 0xf6, 0x2a, 0x45, 0x89,
	0xef, 0xa8, 0x7d, 0x84, 0x41, 0x66, 0xca, 0x76, 0x2f, 0xc6, 0x67, 0xf6, 0x54, 0x7d, 0xac, 0x7e,
	0xc2, 0x68, 0x04, 0x52, 0xdd, 0x05, 0x74, 0x08, 0xb2, 0xe3, 0x2d, 0xdc, 0xb9, 0x6f, 0x5d, 0xda,
	0x9e, 0x5f, 0xd8, 0x75, 0xbc, 0x45, 0xa1, 0x84, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0xd1,
	0x70, 0xd3, 0xae, 0x05, 0x00, 0x00,
}
