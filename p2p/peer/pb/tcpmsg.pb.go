// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tcpmsg.proto

/*
	Package tcpmsg_pb is a generated protocol buffer package.

	It is generated from these files:
		tcpmsg.proto

	It has these top-level messages:
		P2PPackage
		P2PMessage
		ExtMessage
*/
package tcpmsg_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtocolId int32

const (
	ProtocolId_PID_P2P ProtocolId = 0
	ProtocolId_PID_EXT ProtocolId = 255
)

var ProtocolId_name = map[int32]string{
	0:   "PID_P2P",
	255: "PID_EXT",
}
var ProtocolId_value = map[string]int32{
	"PID_P2P": 0,
	"PID_EXT": 255,
}

func (x ProtocolId) Enum() *ProtocolId {
	p := new(ProtocolId)
	*p = x
	return p
}
func (x ProtocolId) String() string {
	return proto.EnumName(ProtocolId_name, int32(x))
}
func (x *ProtocolId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtocolId_value, data, "ProtocolId")
	if err != nil {
		return err
	}
	*x = ProtocolId(value)
	return nil
}
func (ProtocolId) EnumDescriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{0} }

type MessageId int32

const (
	MessageId_MID_HANDSHAKE   MessageId = 0
	MessageId_MID_PING        MessageId = 1
	MessageId_MID_PONG        MessageId = 2
	MessageId_MID_TX          MessageId = 3
	MessageId_MID_EVENT       MessageId = 4
	MessageId_MID_BLOCKHEADER MessageId = 5
	MessageId_MID_BLOCK       MessageId = 6
	MessageId_MID_CHKK        MessageId = 7
	MessageId_MID_RPTK        MessageId = 8
	MessageId_MID_INVALID     MessageId = -1
)

var MessageId_name = map[int32]string{
	0:  "MID_HANDSHAKE",
	1:  "MID_PING",
	2:  "MID_PONG",
	3:  "MID_TX",
	4:  "MID_EVENT",
	5:  "MID_BLOCKHEADER",
	6:  "MID_BLOCK",
	7:  "MID_CHKK",
	8:  "MID_RPTK",
	-1: "MID_INVALID",
}
var MessageId_value = map[string]int32{
	"MID_HANDSHAKE":   0,
	"MID_PING":        1,
	"MID_PONG":        2,
	"MID_TX":          3,
	"MID_EVENT":       4,
	"MID_BLOCKHEADER": 5,
	"MID_BLOCK":       6,
	"MID_CHKK":        7,
	"MID_RPTK":        8,
	"MID_INVALID":     -1,
}

func (x MessageId) Enum() *MessageId {
	p := new(MessageId)
	*p = x
	return p
}
func (x MessageId) String() string {
	return proto.EnumName(MessageId_name, int32(x))
}
func (x *MessageId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageId_value, data, "MessageId")
	if err != nil {
		return err
	}
	*x = MessageId(value)
	return nil
}
func (MessageId) EnumDescriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{1} }

type KeyStatus int32

const (
	KeyStatus_KS_NOTEXIST KeyStatus = 0
	KeyStatus_KS_EXIST    KeyStatus = 1
)

var KeyStatus_name = map[int32]string{
	0: "KS_NOTEXIST",
	1: "KS_EXIST",
}
var KeyStatus_value = map[string]int32{
	"KS_NOTEXIST": 0,
	"KS_EXIST":    1,
}

func (x KeyStatus) Enum() *KeyStatus {
	p := new(KeyStatus)
	*p = x
	return p
}
func (x KeyStatus) String() string {
	return proto.EnumName(KeyStatus_name, int32(x))
}
func (x *KeyStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KeyStatus_value, data, "KeyStatus")
	if err != nil {
		return err
	}
	*x = KeyStatus(value)
	return nil
}
func (KeyStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{2} }

type P2PPackage struct {
	Pid              *ProtocolId `protobuf:"varint,1,req,name=Pid,enum=tcpmsg.pb.ProtocolId" json:"Pid,omitempty"`
	ExtMid           *MessageId  `protobuf:"varint,2,opt,name=ExtMid,enum=tcpmsg.pb.MessageId" json:"ExtMid,omitempty"`
	ExtKey           []byte      `protobuf:"bytes,3,opt,name=ExtKey" json:"ExtKey,omitempty"`
	PayloadLength    *uint32     `protobuf:"varint,4,req,name=PayloadLength" json:"PayloadLength,omitempty"`
	Payload          []byte      `protobuf:"bytes,5,opt,name=Payload" json:"Payload,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *P2PPackage) Reset()                    { *m = P2PPackage{} }
func (m *P2PPackage) String() string            { return proto.CompactTextString(m) }
func (*P2PPackage) ProtoMessage()               {}
func (*P2PPackage) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{0} }

func (m *P2PPackage) GetPid() ProtocolId {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ProtocolId_PID_P2P
}

func (m *P2PPackage) GetExtMid() MessageId {
	if m != nil && m.ExtMid != nil {
		return *m.ExtMid
	}
	return MessageId_MID_HANDSHAKE
}

func (m *P2PPackage) GetExtKey() []byte {
	if m != nil {
		return m.ExtKey
	}
	return nil
}

func (m *P2PPackage) GetPayloadLength() uint32 {
	if m != nil && m.PayloadLength != nil {
		return *m.PayloadLength
	}
	return 0
}

func (m *P2PPackage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type P2PMessage struct {
	Mid              *MessageId            `protobuf:"varint,1,req,name=mid,enum=tcpmsg.pb.MessageId" json:"mid,omitempty"`
	Handshake        *P2PMessage_Handshake `protobuf:"bytes,2,opt,name=handshake" json:"handshake,omitempty"`
	Ping             *P2PMessage_Ping      `protobuf:"bytes,3,opt,name=ping" json:"ping,omitempty"`
	Pong             *P2PMessage_Pong      `protobuf:"bytes,4,opt,name=pong" json:"pong,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *P2PMessage) Reset()                    { *m = P2PMessage{} }
func (m *P2PMessage) String() string            { return proto.CompactTextString(m) }
func (*P2PMessage) ProtoMessage()               {}
func (*P2PMessage) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{1} }

func (m *P2PMessage) GetMid() MessageId {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return MessageId_MID_HANDSHAKE
}

func (m *P2PMessage) GetHandshake() *P2PMessage_Handshake {
	if m != nil {
		return m.Handshake
	}
	return nil
}

func (m *P2PMessage) GetPing() *P2PMessage_Ping {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *P2PMessage) GetPong() *P2PMessage_Pong {
	if m != nil {
		return m.Pong
	}
	return nil
}

type P2PMessage_Protocol struct {
	Pid              *ProtocolId `protobuf:"varint,1,req,name=Pid,enum=tcpmsg.pb.ProtocolId" json:"Pid,omitempty"`
	Ver              []byte      `protobuf:"bytes,2,req,name=Ver" json:"Ver,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *P2PMessage_Protocol) Reset()                    { *m = P2PMessage_Protocol{} }
func (m *P2PMessage_Protocol) String() string            { return proto.CompactTextString(m) }
func (*P2PMessage_Protocol) ProtoMessage()               {}
func (*P2PMessage_Protocol) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{1, 0} }

func (m *P2PMessage_Protocol) GetPid() ProtocolId {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ProtocolId_PID_P2P
}

func (m *P2PMessage_Protocol) GetVer() []byte {
	if m != nil {
		return m.Ver
	}
	return nil
}

type P2PMessage_Handshake struct {
	SubNetId         []byte                 `protobuf:"bytes,1,req,name=SubNetId" json:"SubNetId,omitempty"`
	NodeId           []byte                 `protobuf:"bytes,2,req,name=NodeId" json:"NodeId,omitempty"`
	IP               []byte                 `protobuf:"bytes,3,req,name=IP" json:"IP,omitempty"`
	UDP              *uint32                `protobuf:"varint,4,req,name=UDP" json:"UDP,omitempty"`
	TCP              *uint32                `protobuf:"varint,5,req,name=TCP" json:"TCP,omitempty"`
	ProtoNum         *uint32                `protobuf:"varint,6,req,name=ProtoNum" json:"ProtoNum,omitempty"`
	Protocols        []*P2PMessage_Protocol `protobuf:"bytes,7,rep,name=Protocols" json:"Protocols,omitempty"`
	SignR            *int32                 `protobuf:"varint,8,req,name=SignR" json:"SignR,omitempty"`
	R                []byte                 `protobuf:"bytes,9,req,name=R" json:"R,omitempty"`
	SignS            *int32                 `protobuf:"varint,10,req,name=SignS" json:"SignS,omitempty"`
	S                []byte                 `protobuf:"bytes,11,req,name=S" json:"S,omitempty"`
	Extra            []byte                 `protobuf:"bytes,12,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *P2PMessage_Handshake) Reset()                    { *m = P2PMessage_Handshake{} }
func (m *P2PMessage_Handshake) String() string            { return proto.CompactTextString(m) }
func (*P2PMessage_Handshake) ProtoMessage()               {}
func (*P2PMessage_Handshake) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{1, 1} }

func (m *P2PMessage_Handshake) GetSubNetId() []byte {
	if m != nil {
		return m.SubNetId
	}
	return nil
}

func (m *P2PMessage_Handshake) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *P2PMessage_Handshake) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *P2PMessage_Handshake) GetUDP() uint32 {
	if m != nil && m.UDP != nil {
		return *m.UDP
	}
	return 0
}

func (m *P2PMessage_Handshake) GetTCP() uint32 {
	if m != nil && m.TCP != nil {
		return *m.TCP
	}
	return 0
}

func (m *P2PMessage_Handshake) GetProtoNum() uint32 {
	if m != nil && m.ProtoNum != nil {
		return *m.ProtoNum
	}
	return 0
}

func (m *P2PMessage_Handshake) GetProtocols() []*P2PMessage_Protocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *P2PMessage_Handshake) GetSignR() int32 {
	if m != nil && m.SignR != nil {
		return *m.SignR
	}
	return 0
}

func (m *P2PMessage_Handshake) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *P2PMessage_Handshake) GetSignS() int32 {
	if m != nil && m.SignS != nil {
		return *m.SignS
	}
	return 0
}

func (m *P2PMessage_Handshake) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *P2PMessage_Handshake) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type P2PMessage_Ping struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Extra            []byte  `protobuf:"bytes,2,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *P2PMessage_Ping) Reset()                    { *m = P2PMessage_Ping{} }
func (m *P2PMessage_Ping) String() string            { return proto.CompactTextString(m) }
func (*P2PMessage_Ping) ProtoMessage()               {}
func (*P2PMessage_Ping) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{1, 2} }

func (m *P2PMessage_Ping) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *P2PMessage_Ping) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type P2PMessage_Pong struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Extra            []byte  `protobuf:"bytes,2,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *P2PMessage_Pong) Reset()                    { *m = P2PMessage_Pong{} }
func (m *P2PMessage_Pong) String() string            { return proto.CompactTextString(m) }
func (*P2PMessage_Pong) ProtoMessage()               {}
func (*P2PMessage_Pong) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{1, 3} }

func (m *P2PMessage_Pong) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *P2PMessage_Pong) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

//
// External application message
//
type ExtMessage struct {
	Mid              *MessageId            `protobuf:"varint,1,req,name=mid,enum=tcpmsg.pb.MessageId" json:"mid,omitempty"`
	CheckKey         *ExtMessage_CheckKey  `protobuf:"bytes,2,opt,name=checkKey" json:"checkKey,omitempty"`
	ReportKey        *ExtMessage_ReportKey `protobuf:"bytes,3,opt,name=reportKey" json:"reportKey,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ExtMessage) Reset()                    { *m = ExtMessage{} }
func (m *ExtMessage) String() string            { return proto.CompactTextString(m) }
func (*ExtMessage) ProtoMessage()               {}
func (*ExtMessage) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{2} }

func (m *ExtMessage) GetMid() MessageId {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return MessageId_MID_HANDSHAKE
}

func (m *ExtMessage) GetCheckKey() *ExtMessage_CheckKey {
	if m != nil {
		return m.CheckKey
	}
	return nil
}

func (m *ExtMessage) GetReportKey() *ExtMessage_ReportKey {
	if m != nil {
		return m.ReportKey
	}
	return nil
}

type ExtMessage_CheckKey struct {
	Extra            []byte `protobuf:"bytes,1,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExtMessage_CheckKey) Reset()                    { *m = ExtMessage_CheckKey{} }
func (m *ExtMessage_CheckKey) String() string            { return proto.CompactTextString(m) }
func (*ExtMessage_CheckKey) ProtoMessage()               {}
func (*ExtMessage_CheckKey) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{2, 0} }

func (m *ExtMessage_CheckKey) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type ExtMessage_ReportKey struct {
	Status           *KeyStatus `protobuf:"varint,1,req,name=Status,enum=tcpmsg.pb.KeyStatus" json:"Status,omitempty"`
	Extra            []byte     `protobuf:"bytes,2,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ExtMessage_ReportKey) Reset()                    { *m = ExtMessage_ReportKey{} }
func (m *ExtMessage_ReportKey) String() string            { return proto.CompactTextString(m) }
func (*ExtMessage_ReportKey) ProtoMessage()               {}
func (*ExtMessage_ReportKey) Descriptor() ([]byte, []int) { return fileDescriptorTcpmsg, []int{2, 1} }

func (m *ExtMessage_ReportKey) GetStatus() KeyStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return KeyStatus_KS_NOTEXIST
}

func (m *ExtMessage_ReportKey) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*P2PPackage)(nil), "tcpmsg.pb.P2PPackage")
	proto.RegisterType((*P2PMessage)(nil), "tcpmsg.pb.P2PMessage")
	proto.RegisterType((*P2PMessage_Protocol)(nil), "tcpmsg.pb.P2PMessage.Protocol")
	proto.RegisterType((*P2PMessage_Handshake)(nil), "tcpmsg.pb.P2PMessage.Handshake")
	proto.RegisterType((*P2PMessage_Ping)(nil), "tcpmsg.pb.P2PMessage.Ping")
	proto.RegisterType((*P2PMessage_Pong)(nil), "tcpmsg.pb.P2PMessage.Pong")
	proto.RegisterType((*ExtMessage)(nil), "tcpmsg.pb.ExtMessage")
	proto.RegisterType((*ExtMessage_CheckKey)(nil), "tcpmsg.pb.ExtMessage.CheckKey")
	proto.RegisterType((*ExtMessage_ReportKey)(nil), "tcpmsg.pb.ExtMessage.ReportKey")
	proto.RegisterEnum("tcpmsg.pb.ProtocolId", ProtocolId_name, ProtocolId_value)
	proto.RegisterEnum("tcpmsg.pb.MessageId", MessageId_name, MessageId_value)
	proto.RegisterEnum("tcpmsg.pb.KeyStatus", KeyStatus_name, KeyStatus_value)
}
func (m *P2PPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PPackage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.Pid))
	}
	if m.ExtMid != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.ExtMid))
	}
	if m.ExtKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.ExtKey)))
		i += copy(dAtA[i:], m.ExtKey)
	}
	if m.PayloadLength == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.PayloadLength))
	}
	if m.Payload != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *P2PMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.Mid))
	}
	if m.Handshake != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(m.Handshake.Size()))
		n1, err := m.Handshake.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Ping != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(m.Ping.Size()))
		n2, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Pong != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(m.Pong.Size()))
		n3, err := m.Pong.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *P2PMessage_Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PMessage_Protocol) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.Pid))
	}
	if m.Ver == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.Ver)))
		i += copy(dAtA[i:], m.Ver)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *P2PMessage_Handshake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PMessage_Handshake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubNetId == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.SubNetId)))
		i += copy(dAtA[i:], m.SubNetId)
	}
	if m.NodeId == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.IP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.UDP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.UDP))
	}
	if m.TCP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.TCP))
	}
	if m.ProtoNum == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.ProtoNum))
	}
	if len(m.Protocols) > 0 {
		for _, msg := range m.Protocols {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTcpmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SignR == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.SignR))
	}
	if m.R == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.R)))
		i += copy(dAtA[i:], m.R)
	}
	if m.SignS == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.SignS))
	}
	if m.S == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	if m.Extra != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *P2PMessage_Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PMessage_Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.Seq))
	}
	if m.Extra != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *P2PMessage_Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PMessage_Pong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.Seq))
	}
	if m.Extra != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExtMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.Mid))
	}
	if m.CheckKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(m.CheckKey.Size()))
		n4, err := m.CheckKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ReportKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(m.ReportKey.Size()))
		n5, err := m.ReportKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExtMessage_CheckKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtMessage_CheckKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Extra != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExtMessage_ReportKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtMessage_ReportKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(*m.Status))
	}
	if m.Extra != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTcpmsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *P2PPackage) Size() (n int) {
	var l int
	_ = l
	if m.Pid != nil {
		n += 1 + sovTcpmsg(uint64(*m.Pid))
	}
	if m.ExtMid != nil {
		n += 1 + sovTcpmsg(uint64(*m.ExtMid))
	}
	if m.ExtKey != nil {
		l = len(m.ExtKey)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.PayloadLength != nil {
		n += 1 + sovTcpmsg(uint64(*m.PayloadLength))
	}
	if m.Payload != nil {
		l = len(m.Payload)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *P2PMessage) Size() (n int) {
	var l int
	_ = l
	if m.Mid != nil {
		n += 1 + sovTcpmsg(uint64(*m.Mid))
	}
	if m.Handshake != nil {
		l = m.Handshake.Size()
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.Pong != nil {
		l = m.Pong.Size()
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *P2PMessage_Protocol) Size() (n int) {
	var l int
	_ = l
	if m.Pid != nil {
		n += 1 + sovTcpmsg(uint64(*m.Pid))
	}
	if m.Ver != nil {
		l = len(m.Ver)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *P2PMessage_Handshake) Size() (n int) {
	var l int
	_ = l
	if m.SubNetId != nil {
		l = len(m.SubNetId)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.NodeId != nil {
		l = len(m.NodeId)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.IP != nil {
		l = len(m.IP)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.UDP != nil {
		n += 1 + sovTcpmsg(uint64(*m.UDP))
	}
	if m.TCP != nil {
		n += 1 + sovTcpmsg(uint64(*m.TCP))
	}
	if m.ProtoNum != nil {
		n += 1 + sovTcpmsg(uint64(*m.ProtoNum))
	}
	if len(m.Protocols) > 0 {
		for _, e := range m.Protocols {
			l = e.Size()
			n += 1 + l + sovTcpmsg(uint64(l))
		}
	}
	if m.SignR != nil {
		n += 1 + sovTcpmsg(uint64(*m.SignR))
	}
	if m.R != nil {
		l = len(m.R)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.SignS != nil {
		n += 1 + sovTcpmsg(uint64(*m.SignS))
	}
	if m.S != nil {
		l = len(m.S)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *P2PMessage_Ping) Size() (n int) {
	var l int
	_ = l
	if m.Seq != nil {
		n += 1 + sovTcpmsg(uint64(*m.Seq))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *P2PMessage_Pong) Size() (n int) {
	var l int
	_ = l
	if m.Seq != nil {
		n += 1 + sovTcpmsg(uint64(*m.Seq))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtMessage) Size() (n int) {
	var l int
	_ = l
	if m.Mid != nil {
		n += 1 + sovTcpmsg(uint64(*m.Mid))
	}
	if m.CheckKey != nil {
		l = m.CheckKey.Size()
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.ReportKey != nil {
		l = m.ReportKey.Size()
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtMessage_CheckKey) Size() (n int) {
	var l int
	_ = l
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtMessage_ReportKey) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovTcpmsg(uint64(*m.Status))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovTcpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTcpmsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTcpmsg(x uint64) (n int) {
	return sovTcpmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *P2PPackage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P2PPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P2PPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v ProtocolId
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ProtocolId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtMid", wireType)
			}
			var v MessageId
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (MessageId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExtMid = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtKey = append(m.ExtKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtKey == nil {
				m.ExtKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadLength", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayloadLength = &v
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2PMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P2PMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P2PMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var v MessageId
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (MessageId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handshake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Handshake == nil {
				m.Handshake = &P2PMessage_Handshake{}
			}
			if err := m.Handshake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ping == nil {
				m.Ping = &P2PMessage_Ping{}
			}
			if err := m.Ping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pong == nil {
				m.Pong = &P2PMessage_Pong{}
			}
			if err := m.Pong.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2PMessage_Protocol) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v ProtocolId
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ProtocolId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = append(m.Ver[:0], dAtA[iNdEx:postIndex]...)
			if m.Ver == nil {
				m.Ver = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2PMessage_Handshake) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Handshake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Handshake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubNetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubNetId = append(m.SubNetId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubNetId == nil {
				m.SubNetId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP[:0], dAtA[iNdEx:postIndex]...)
			if m.IP == nil {
				m.IP = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UDP = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TCP = &v
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtoNum = &v
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocols = append(m.Protocols, &P2PMessage_Protocol{})
			if err := m.Protocols[len(m.Protocols)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignR", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignR = &v
			hasFields[0] |= uint64(0x00000040)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignS", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignS = &v
			hasFields[0] |= uint64(0x00000100)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000200)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2PMessage_Ping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seq = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2PMessage_Pong) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seq = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var v MessageId
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (MessageId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckKey == nil {
				m.CheckKey = &ExtMessage_CheckKey{}
			}
			if err := m.CheckKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportKey == nil {
				m.ReportKey = &ExtMessage_ReportKey{}
			}
			if err := m.ReportKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtMessage_CheckKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtMessage_ReportKey) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v KeyStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (KeyStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTcpmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTcpmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTcpmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTcpmsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTcpmsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTcpmsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTcpmsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTcpmsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tcpmsg.proto", fileDescriptorTcpmsg) }

var fileDescriptorTcpmsg = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6e, 0xda, 0x4a,
	0x14, 0xc7, 0x33, 0xe6, 0xd3, 0x07, 0x48, 0x7c, 0xe7, 0xe6, 0x5e, 0x8d, 0x58, 0x50, 0x2b, 0xaa,
	0x1a, 0x84, 0x2a, 0x16, 0x2c, 0xab, 0x76, 0x41, 0xc0, 0x0a, 0x96, 0x13, 0x33, 0x1a, 0xbb, 0x51,
	0x76, 0xc8, 0xc1, 0x96, 0x41, 0x49, 0x6c, 0x8a, 0x1d, 0x29, 0x79, 0x93, 0xae, 0xbb, 0xaa, 0xd4,
	0x45, 0x1f, 0xa0, 0x2f, 0xd0, 0x65, 0x1f, 0xa1, 0x4a, 0x1f, 0x24, 0xd5, 0x8c, 0xbf, 0x48, 0x45,
	0xab, 0x94, 0xd5, 0xfc, 0x0f, 0xbf, 0x33, 0xf3, 0x3f, 0x67, 0xce, 0x18, 0x9a, 0xf1, 0x7c, 0x75,
	0x1d, 0xf9, 0xfd, 0xd5, 0x3a, 0x8c, 0x43, 0x2c, 0x67, 0xea, 0xe2, 0xe0, 0x0b, 0x02, 0xa0, 0x03,
	0x4a, 0x9d, 0xf9, 0xa5, 0xe3, 0x7b, 0xf8, 0x10, 0x4a, 0x74, 0xe9, 0x12, 0xa4, 0x4a, 0xdd, 0xdd,
	0xc1, 0x7f, 0xfd, 0x9c, 0xeb, 0x53, 0x9e, 0x38, 0x0f, 0xaf, 0x74, 0x97, 0x71, 0x02, 0xbf, 0x84,
	0xaa, 0x76, 0x1b, 0x9f, 0x2e, 0x5d, 0x22, 0xa9, 0xa8, 0xbb, 0x3b, 0xd8, 0xdf, 0x60, 0x4f, 0xbd,
	0x28, 0x72, 0x7c, 0x4f, 0x77, 0x59, 0xca, 0xe0, 0xff, 0x05, 0x6d, 0x78, 0x77, 0xa4, 0xa4, 0xa2,
	0x6e, 0x93, 0xa5, 0x0a, 0x3f, 0x87, 0x16, 0x75, 0xee, 0xae, 0x42, 0xc7, 0x3d, 0xf1, 0x02, 0x3f,
	0x5e, 0x90, 0xb2, 0x2a, 0x75, 0x5b, 0xec, 0x71, 0x10, 0x13, 0xa8, 0xa5, 0x01, 0x52, 0x11, 0xe9,
	0x99, 0x3c, 0xf8, 0x58, 0x11, 0xee, 0xd3, 0x03, 0xf1, 0x0b, 0x28, 0x5d, 0xe7, 0xee, 0xb7, 0x3b,
	0xe2, 0x00, 0x7e, 0x03, 0xf2, 0xc2, 0x09, 0xdc, 0x68, 0xe1, 0x5c, 0x7a, 0xc2, 0x7f, 0x63, 0xf0,
	0x6c, 0xb3, 0xd6, 0x7c, 0xc7, 0xfe, 0x24, 0xc3, 0x58, 0x91, 0x81, 0xfb, 0x50, 0x5e, 0x2d, 0x03,
	0x5f, 0xd4, 0xd2, 0x18, 0xb4, 0xb7, 0x67, 0xd2, 0x65, 0xe0, 0x33, 0xc1, 0x09, 0x3e, 0x0c, 0x7c,
	0x52, 0xfe, 0x23, 0x1f, 0x0a, 0x3e, 0x0c, 0xfc, 0xb6, 0x06, 0xf5, 0xac, 0xdd, 0x4f, 0xbf, 0x10,
	0x05, 0x4a, 0x67, 0xde, 0x9a, 0x48, 0xaa, 0xd4, 0x6d, 0x32, 0xbe, 0x6c, 0x7f, 0x92, 0x40, 0xce,
	0xfd, 0xe3, 0x36, 0xd4, 0xad, 0x9b, 0x0b, 0xd3, 0x8b, 0xf5, 0x64, 0xb7, 0x26, 0xcb, 0x35, 0xbf,
	0x1e, 0x33, 0x74, 0x3d, 0xdd, 0x4d, 0xd3, 0x53, 0x85, 0x77, 0x41, 0xd2, 0x29, 0x29, 0x89, 0x98,
	0xa4, 0x53, 0x7e, 0xc6, 0xdb, 0x31, 0x4d, 0x2f, 0x89, 0x2f, 0x79, 0xc4, 0x1e, 0x51, 0x52, 0x49,
	0x22, 0xf6, 0x88, 0xf2, 0x73, 0x84, 0x35, 0xf3, 0xe6, 0x9a, 0x54, 0x45, 0x38, 0xd7, 0xf8, 0x35,
	0xc8, 0x99, 0xed, 0x88, 0xd4, 0xd4, 0x52, 0xb7, 0x31, 0xe8, 0xfc, 0xa6, 0x1b, 0x29, 0xc6, 0x8a,
	0x04, 0xbc, 0x0f, 0x15, 0x6b, 0xe9, 0x07, 0x8c, 0xd4, 0x55, 0xa9, 0x5b, 0x61, 0x89, 0xc0, 0x4d,
	0x40, 0x8c, 0xc8, 0xc2, 0x22, 0x62, 0x19, 0x63, 0x11, 0x28, 0x18, 0x8b, 0x33, 0x16, 0x69, 0x24,
	0x8c, 0xc5, 0x19, 0xed, 0x36, 0x5e, 0x3b, 0xa4, 0x29, 0x86, 0x29, 0x11, 0xed, 0x3e, 0x94, 0xf9,
	0x95, 0xf1, 0x8a, 0x22, 0xef, 0x9d, 0x68, 0x51, 0x99, 0xf1, 0x65, 0xc1, 0x4b, 0xbf, 0xf2, 0xe1,
	0xd3, 0xf9, 0x83, 0x0f, 0x12, 0x00, 0x7f, 0x0d, 0x7f, 0x39, 0xaa, 0xaf, 0xa0, 0x3e, 0x5f, 0x78,
	0xf3, 0x4b, 0xfe, 0x76, 0x92, 0x49, 0xdd, 0xec, 0x58, 0xb1, 0x61, 0x7f, 0x94, 0x52, 0x2c, 0xe7,
	0xf9, 0x98, 0xaf, 0xbd, 0x55, 0xb8, 0xce, 0x1f, 0xde, 0xe3, 0x31, 0xdf, 0x48, 0x66, 0x19, 0xc6,
	0x8a, 0x8c, 0xb6, 0x0a, 0xf5, 0x6c, 0xd3, 0xa2, 0x26, 0xb4, 0xd9, 0x83, 0x29, 0xc8, 0x79, 0x26,
	0xff, 0x22, 0x58, 0xb1, 0x13, 0xdf, 0x44, 0x5b, 0x8a, 0x32, 0xbc, 0xbb, 0xe4, 0x3f, 0x96, 0x32,
	0xdb, 0x9b, 0xd4, 0x3b, 0x04, 0x28, 0xe6, 0x1a, 0x37, 0xa0, 0x46, 0xf5, 0xf1, 0x8c, 0x0e, 0xa8,
	0xb2, 0x83, 0x9b, 0x89, 0xd0, 0xce, 0x6d, 0xe5, 0x01, 0xf5, 0x3e, 0x23, 0x90, 0xf3, 0x4e, 0xe1,
	0x7f, 0xa0, 0x75, 0xaa, 0x8f, 0x67, 0x93, 0xa1, 0x39, 0xb6, 0x26, 0x43, 0x43, 0x13, 0x78, 0x9d,
	0x87, 0xa8, 0x6e, 0x1e, 0x2b, 0x28, 0x57, 0x53, 0xf3, 0x58, 0x91, 0x30, 0x40, 0x95, 0x2b, 0xfb,
	0x5c, 0x29, 0xe1, 0x16, 0xc8, 0x7c, 0xad, 0x9d, 0x69, 0xa6, 0xad, 0x94, 0xf1, 0xbf, 0xb0, 0xc7,
	0xe5, 0xd1, 0xc9, 0x74, 0x64, 0x4c, 0xb4, 0xe1, 0x58, 0x63, 0x4a, 0x25, 0x63, 0x44, 0x50, 0xa9,
	0x66, 0x9b, 0x8d, 0x26, 0x86, 0xa1, 0xd4, 0x32, 0xc5, 0xa8, 0x6d, 0x28, 0x75, 0x4c, 0xa0, 0xc1,
	0x95, 0x6e, 0x9e, 0x0d, 0x4f, 0xf4, 0xb1, 0xf2, 0x90, 0xfd, 0x50, 0xaf, 0x07, 0x72, 0xde, 0x05,
	0xbc, 0x07, 0x0d, 0xc3, 0x9a, 0x99, 0x53, 0x5b, 0x3b, 0xd7, 0x2d, 0x3b, 0xb1, 0x6b, 0x58, 0xb3,
	0x44, 0xa1, 0x23, 0xe5, 0xeb, 0x7d, 0x07, 0x7d, 0xbb, 0xef, 0xa0, 0xef, 0xf7, 0x1d, 0xf4, 0xfe,
	0x47, 0x67, 0xe7, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x0d, 0x8b, 0x5f, 0xc0, 0x05, 0x00,
	0x00,
}
